name: Create Release on Netlify Deploy

on:
    repository_dispatch:
        types: [webhook_trigger]
    push:
        paths:
            - "index.html"
            - "app.js"
            - "style.css"
        branches:
            - main

jobs:
    create-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check if relevant files changed
              id: check_changes
              run: |
                  # Get the list of changed files in the last commit
                  if [ "${{ github.event_name }}" = "push" ]; then
                    changed_files=$(git diff --name-only HEAD~1 HEAD)
                  else
                    # For repository_dispatch, check recent commits
                    changed_files=$(git diff --name-only HEAD~5 HEAD)
                  fi

                  echo "Changed files:"
                  echo "$changed_files"

                  # Check if any of our target files changed
                  relevant_change=false
                  for file in index.html app.js style.css; do
                    if echo "$changed_files" | grep -q "^$file$"; then
                      echo "Relevant file changed: $file"
                      relevant_change=true
                      break
                    fi
                  done

                  echo "relevant_change=$relevant_change" >> $GITHUB_OUTPUT

            - name: Generate release tag
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: release_tag
              run: |
                  # Generate base date in YY.MM.DD format
                  base_date=$(date +'%y.%m.%d')
                  echo "Base date: $base_date"

                  # Get all releases for today
                  today_releases=$(gh release list --json tagName --jq '.[] | select(.tagName | startswith("'$base_date'.")) | .tagName' 2>/dev/null || echo "")

                  if [ -z "$today_releases" ]; then
                    # No releases today, start with build 1
                    build_number=1
                  else
                    # Find the highest build number for today
                    highest_build=$(echo "$today_releases" | sed "s/^$base_date\.//" | sort -n | tail -1)
                    build_number=$((highest_build + 1))
                  fi

                  release_tag="$base_date.$build_number"
                  echo "Generated release tag: $release_tag"
                  echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Get latest release tag
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: latest_release
              run: |
                  latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
                  echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Get git changes since last release
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: changes
              run: |
                  if [ -n "${{ steps.latest_release.outputs.latest_tag }}" ]; then
                    echo "Getting changes since ${{ steps.latest_release.outputs.latest_tag }}"
                    # Filter changes to only include our target files
                    changes=$(git log --oneline --pretty=format:"- %s" ${{ steps.latest_release.outputs.latest_tag }}..HEAD -- index.html app.js style.css | head -20)
                  else
                    echo "No previous release found, getting recent commits for target files"
                    changes=$(git log --oneline --pretty=format:"- %s" -10 -- index.html app.js style.css)
                  fi

                  if [ -z "$changes" ]; then
                    changes="- Minor changes"
                  fi

                  # Save changes to output, handling multiline
                  echo "changes<<EOF" >> $GITHUB_OUTPUT
                  echo "$changes" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              if: steps.check_changes.outputs.relevant_change == 'true'
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
              run: |
                  gh release create v${{ steps.release_tag.outputs.release_tag }} \
                    --title "Release v${{ steps.release_tag.outputs.release_tag }}" \
                    --notes "Automated release triggered by app file changes

                  ## Changes Since Last Release
                  ${{ steps.changes.outputs.changes }}

                  ## Files Affected
                  - App files (index.html, app.js, style.css) have been updated

                  ## Deployment  
                  - Successfully deployed to Netlify
                  - Triggered at: ${{ steps.release_tag.outputs.release_tag }}"

            - name: Skip release notification
              if: steps.check_changes.outputs.relevant_change == 'false'
              run: |
                  echo "No relevant file changes detected. Skipping release creation."
                  echo "Only changes to index.html, app.js, or style.css trigger releases."
