name: Create Release on Netlify Deploy

on:
    repository_dispatch:
        types: [webhook_trigger]

jobs:
    create-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check if relevant files changed
              id: check_changes
              run: |
                  # Check for duplicate runs - skip if a recent release exists
                  # Check if a release was created in the last 5 minutes (to avoid webhook duplicates)
                  recent_release=$(gh release list --limit 1 --json publishedAt --jq '.[0].publishedAt' 2>/dev/null || echo "")
                  if [ -n "$recent_release" ]; then
                    release_time=$(date -d "$recent_release" +%s 2>/dev/null || echo "0")
                    current_time=$(date +%s)
                    time_diff=$((current_time - release_time))
                    
                    if [ $time_diff -lt 300 ]; then  # 5 minutes = 300 seconds
                      echo "Recent release found (${time_diff}s ago), skipping duplicate webhook trigger"
                      echo "relevant_change=false" >> $GITHUB_OUTPUT
                      exit 0
                    fi
                  fi

                  # For webhook triggers, check recent commits for relevant file changes
                  changed_files=$(git diff --name-only HEAD~3 HEAD)

                  echo "Changed files in recent commits:"
                  echo "$changed_files"

                  # Check if any of our target files changed
                  relevant_change=false
                  for file in index.html app.js style.css; do
                    if echo "$changed_files" | grep -q "^$file$"; then
                      echo "Relevant file changed: $file"
                      relevant_change=true
                      break
                    fi
                  done

                  echo "relevant_change=$relevant_change" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Generate release tag
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: release_tag
              run: |
                  # Generate base date in YY.MM.DD format using IST (GMT+5:30)
                  base_date=$(TZ='Asia/Kolkata' date +'%y.%m.%d')
                  echo "Base date: $base_date"

                  # Get all releases for today (looking for v prefix)
                  today_releases=$(gh release list --json tagName --jq '.[] | select(.tagName | startswith("v'$base_date'.")) | .tagName' 2>/dev/null || echo "")

                  echo "Today's releases: $today_releases"

                  if [ -z "$today_releases" ]; then
                    # No releases today, start with build 1
                    build_number=1
                  else
                    # Find the highest build number for today (remove v prefix and base date)
                    highest_build=$(echo "$today_releases" | sed "s/^v$base_date\.//" | sort -n | tail -1)
                    echo "Highest build found: $highest_build"
                    build_number=$((highest_build + 1))
                  fi

                  release_tag="$base_date.$build_number"
                  echo "Generated release tag: $release_tag"
                  echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Get latest release tag
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: latest_release
              run: |
                  latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
                  echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

            - name: Get git history since last release
              if: steps.check_changes.outputs.relevant_change == 'true'
              id: git_history
              run: |
                  if [ -n "${{ steps.latest_release.outputs.latest_tag }}" ]; then
                    echo "Getting commit history since ${{ steps.latest_release.outputs.latest_tag }}"
                    # Get all commits since last release with better formatting, excluding merge commits
                    commits=$(git log --oneline --no-merges --pretty=format:"- **%s** (%h)" ${{ steps.latest_release.outputs.latest_tag }}..HEAD | head -15)
                    commit_count=$(git rev-list --count --no-merges ${{ steps.latest_release.outputs.latest_tag }}..HEAD)
                  else
                    echo "No previous release found, getting recent commits"
                    commits=$(git log --oneline --no-merges --pretty=format:"- **%s** (%h)" -10)
                    commit_count=$(git rev-list --count --no-merges HEAD)
                  fi

                  if [ -z "$commits" ]; then
                    commits="- Initial release"
                    commit_count=1
                  fi

                  # Save commits to output, handling multiline
                  echo "git_history<<EOF" >> $GITHUB_OUTPUT
                  echo "$commits" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

                  echo "commit_count=$commit_count" >> $GITHUB_OUTPUT

            - name: Create Release
              if: steps.check_changes.outputs.relevant_change == 'true'
              env:
                  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
              run: |
                  # Get current IST date and time for triggered at field
                  triggered_time=$(TZ='Asia/Kolkata' date +'%Y-%m-%d %H:%M:%S IST')

                  gh release create v${{ steps.release_tag.outputs.release_tag }} \
                    --title "Release v${{ steps.release_tag.outputs.release_tag }}" \
                    --notes "## üöÄ Automated Release

                  This release was automatically created following a successful deployment.

                  ### üìã Commit History (${{ steps.git_history.outputs.commit_count }} commits)
                  ${{ steps.git_history.outputs.git_history }}

                  ### üîó Previous Version
                  Previous release: ${{ steps.latest_release.outputs.latest_tag || 'None' }}

                  ### ‚è∞ Release Information  
                  - **Released on**: $triggered_time
                  - **Build version**: v${{ steps.release_tag.outputs.release_tag }}
                  - **Deployment**: Successfully deployed to Netlify"

            - name: Skip release notification
              if: steps.check_changes.outputs.relevant_change == 'false'
              run: |
                  echo "No relevant file changes detected. Skipping release creation."
                  echo "Only changes to index.html, app.js, or style.css trigger releases."
